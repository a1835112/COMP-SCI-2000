// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?    1
        nx, // negate the x input?  1
        zy, // zero the y input?    1
        ny, // negate the y input?  1
        f,  // compute out = x + y (if 1) or x & y (if 0)   1
        no; // negate the out output?   1

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
   // Put you code here:
   Mux16(a=x,b=false,sel=zx,out=res1);
   Not16(in=res1,out=res2);
   Mux16(a=res1,b=res2,sel=nx,out=res3);

   Mux16(a=y,b=false,sel=zy,out=res4);
   Not16(in=res4,out=res5);
   Mux16(a=res4,b=res5,sel=ny,out=res6);

   And16(a=res3,b=res6,out=res7);
   Add16(a=res3,b=res6,out=res8);

   Mux16(a=res7,b=res8,sel=f,out=res9);

   Not16(in=res9,out=res10);
   //from out[0] to out[7]; from out[8] to out[15]
   Mux16(a=res9,b=res10,sel=no,out=out,out[15]=ng,out[0..7]=res11,out[8..15]=res12);

   Or8Way(in=res11,out=res13);
   Or8Way(in=res12,out=res14);

   Or(a=res13,b=res14, out=res15);
   Not(in=res15,out=zr);
}